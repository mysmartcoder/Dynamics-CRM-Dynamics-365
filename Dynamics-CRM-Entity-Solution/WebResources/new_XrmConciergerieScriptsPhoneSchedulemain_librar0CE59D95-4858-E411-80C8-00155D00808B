//Créateur : CC
//Date : 17/10/2014
//Fichier JS contenant les fonctionnalités permettant de gérer l'entité Téléphone / Horaire 

//On référence les bibliothèques nécessaires
/// <reference path="../Generics/global_functions.js" />
/// <reference path="../Generics/SDK.REST.js" />
/// <reference path="../Generics/global_variables.js" />
/// <reference path="../Generics/JSIHelper.js" />

//On utilisera les namespaces pour avoir plus d'organisation dans le code
if (typeof (XrmConciergerie) == "undefined")
{ XrmConciergerie = { __namespace: true }; }
if (typeof (XrmConciergerie.Scripts) == "undefined")
{ XrmConciergerie.Scripts = { __namespace: true }; }

//On crée le namespace du fichier 
XrmConciergerie.Scripts.FormPhoneSchedule = {

    //Fonction qui sera appelé au chargement du formulaire
    Form_OnLoad: function () {

        //RG128
        Xrm.Page.data.entity.removeOnSave(XrmConciergerie.Scripts.FormPhoneSchedule.DetectDoublonContact); // Après la création de l'enregistrement, si on ne fait pas un remove, alors le addOnSave se fait 2x
        Xrm.Page.data.entity.addOnSave(XrmConciergerie.Scripts.FormPhoneSchedule.DetectDoublonContact);

        // RGI001
        JSIHelper.HackPhones();

        //RG156
        if (Xrm.Page.ui.getFormType() == FORM_TYPE_CREATE) {
            XrmConciergerie.Scripts.FormPhoneSchedule.SetCountryId();
        }
        JSIHelper.GetAttribute("new_contactid").addOnChange(XrmConciergerie.Scripts.FormPhoneSchedule.SetCountryId);

        //CCR
        //RG0133 : Récupérer les code pays en fonction du pays
        XrmConciergerie.Scripts.FormPhoneSchedule.SetCountryCode();
        Xrm.Page.getAttribute("new_countryid").addOnChange(XrmConciergerie.Scripts.FormPhoneSchedule.SetCountryCode);

        

    },

    //RG156
    // CCR - 17/10/2014 : Pays : Ce champ sera automatiquement alimenté par la valeur du pays présent 
    //                                   dans l’adresse principale de la fiche du contact associé. 
    //Parametre : rien
    //Retour : rien
    SetCountryId: function () {

        JSIHelper.GetParentLookup("new_contactid", "new_countryid", "new_countryid");

        JSIHelper.SetAttributeValue("new_countrycode", null);

        var lookupCountry = JSIHelper.GetParentLookup("new_contactid", "new_countryid");

        if (lookupCountry != null && lookupCountry.length > 0) {
            SDK.REST.retrieveRecordSync(
                lookupCountry[0].id,
                        "new_country",
                        "new_countrycode",
                        null,
                        function (result) {
                            if (result != null) {
                                JSIHelper.SetAttributeValue("new_countrycode", result.new_countrycode);
                            }
                        },
                        function (error) {
                        },
                        function () {
                        }
                );
        }



    },

    //CCR - 14/11/2014
    //RG0133 : Récupérer les code pays en fonction du pays
    //Paramètre : rien
    //Retour : rien
    SetCountryCode: function () {

        var country = JSIHelper.GetLookupValue("new_countryid");

        SDK.REST.retrieveMultipleRecordsSync(
            "new_country",
            "$select=new_countrycode&"
            + "$filter=new_countryId eq (guid'" + country + "')",
        function (results) {
            if (results && results.length == 1) {
                var country = results[0];
                Xrm.Page.getAttribute("new_countrycode").setValue(country.new_countrycode);
            }
            else {
                Xrm.Page.getAttribute("new_countrycode").setValue(null);
            }
        },
        function (error) {
            Xrm.Page.ui.setFormNotification(error, "ERROR", "ERROR_ODATA_CITY");
        },
        function () {
            // OnComplete handler
        }
        );
    },

    //RG128
    // Détection de doublons sur le téléphone et le contrat lié au contact
    DetectDoublonContact: function (ExecutionContextObj) {

        //Xrm.Page.getAttribute("new_phonenumber").fireOnChange();

        var number = Xrm.Page.getAttribute("new_phonenumber").getValue() == null ? null : JSIHelper.GetAttributeValue("new_phonenumber");
        var typecontact = Xrm.Page.getAttribute("new_contactid").getValue() == null ? null : JSIHelper.GetParentAttribute("new_contactid", "new_typeofcontactlist").Value;
        var contact = Xrm.Page.getAttribute("new_contactid").getValue() == null ? null : JSIHelper.GetAttributeValue("new_contactid");
        var contrat = Xrm.Page.getAttribute("new_contactid").getValue() == null ? null : JSIHelper.GetParentLookup("new_contactid", "new_contractid");

        var phoneid = Xrm.Page.data.entity.getId();

        //Si on est en création on met une valeur bidon pour ne pas que ça plante lors du test dans la requête
        if (Xrm.Page.ui.getFormType() == FORM_TYPE_CREATE) {
            phoneid = '{00000000-0000-0000-0000-000000000000}';
        }

        var isExist = false;

        // on vérifie que le contact est de type "client"
        if (typecontact == 100000002) {

            SDK.REST.retrieveMultipleRecordsSync(
        "new_phoneschedule",
        "$select=new_phonenumber,new_contactid,new_phonescheduleId&" +
        "$filter=new_phonenumber eq '" + CrmEncodeDecode.CrmUrlEncode(number) + "' and new_phonescheduleId ne (guid'" + phoneid + "')",
    function (results) {
        if (results) {
            // on parcours l'ensemble des téléphones identique, avec leurs contacts associés
            for (var i = 0; i < results.length; i++) {

                //on récupére l'id du contact qu'on parcours 
                var contactOfTel = results[i].new_contactid.Id;
                // on récupére l'id du contrat appartenant au contact qu'on parcours
                var contratId = XrmConciergerie.Scripts.FormPhoneSchedule.GetContract(contactOfTel);
                
                if (contratId != null && contrat != null)
                    if (contrat[0].id == contratId) {
                        isExist = true;
                        break;
                    }
            }

            if (isExist) {
                Xrm.Utility.confirmDialog(PHONESCEDULE_CHECKDUPLICATE_CONTRATTEL_ERROR_MESSAGE1,
                                function () {

                                },
                                function () {
                                    Xrm.Page.getControl("new_phonenumber").setFocus();
                                    ExecutionContextObj.getEventArgs().preventDefault();
                                });
            }
        }
    },
    function (error) {
        Xrm.Page.ui.setFormNotification(error, "ERROR", "ERROR_ODATA_CITY");
    },
    function () {
        // OnComplete handler
    }
);

        }
    },

    //RG128 Suite
    // On récupére l'id du contrat d'un contact qu'on parcours pour lequel le téléphone est similaire
    GetContract: function (contactId) {
        var resultContrat;
        SDK.REST.retrieveRecordSync(
            contactId,
            "Contact",
            "new_contractid,ContactId",
            null,
            function (result) {
                if (result != null) {
                    resultContrat = result.new_contractid;

                }
            },
            function (error) {
            },
            function () {
            }
        );

        return resultContrat.Id;

    },

    _namespace: true,

}
