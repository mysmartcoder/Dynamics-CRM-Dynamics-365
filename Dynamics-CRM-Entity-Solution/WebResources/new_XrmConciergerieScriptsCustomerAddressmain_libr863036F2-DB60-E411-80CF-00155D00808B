//Créateur : CC
//Date : 16/10/2014
//Fichier JS contenant les fonctionnalités permettant de gérer l'entité Adresse

//On référence les bibliothèques nécessaires
/// <reference path="../Generics/global_functions.js" />
/// <reference path="../Generics/global_variables.js" />
/// <reference path="../Generics/JSIHelper.js" />

//On utilisera les namespaces pour avoir plus d'organisation dans le code
if (typeof (XrmConciergerie) == "undefined")
{ XrmConciergerie = { __namespace: true }; }
if (typeof (XrmConciergerie.Scripts) == "undefined")
{ XrmConciergerie.Scripts = { __namespace: true }; }

//On crée le namespace du fichier 
XrmConciergerie.Scripts.FormCustomerAddress = {

    //COM - JS - 01
    RetrieveErrorLog: "Une erreur est survenue et a empêché la récupération : {0}",
    NoStartingWithLog: "Aucune réponse trouvée commençant par '{0}'",
    NoStartingWith: "Aucune réponse trouvée, veuillez vérifier votre saisie ou ajouter l'enregistrement dans la liste.",
    NoneOrMoreThanOneRecordFor: "0 ou plusieurs enregistrement trouvé pour {0}",
    PleaseSelectFromList: "Merci de sélectionner un enregistrement depuis la liste de suggestions.",

    //Fonction qui sera appelé au chargement du formulaire
    Form_OnLoad: function () {

        if (Xrm.Page.ui.getFormType() == FORM_TYPE_CREATE) {
            JSIHelper.SetAttributeValue("country", DEFAULT_COUNTRYNAME.toUpperCase());
        }
        //RG124
        //Afficher le champ Ville ou Ville étrangère en fonction du pays
        XrmConciergerie.Scripts.FormCustomerAddress.SetCitiesVisibilityText(false);
        JSIHelper.GetAttribute("country").addOnChange(function () { XrmConciergerie.Scripts.FormCustomerAddress.SetCitiesVisibilityText(true); });

        //autocomplete sur les champs city et country
        $('head').append('<link rel="stylesheet" href="https://code.jquery.com/ui/1.10.3/themes/redmond/jquery-ui.css" type="text/css" />');
        $("#country").keyup(XrmConciergerie.Scripts.FormCustomerAddress.OnTypeCountry);
        $("#city").keyup(XrmConciergerie.Scripts.FormCustomerAddress.OnTypeCity);
        $("#city").attr("autocomplete", "off");
        $("#country").attr("autocomplete", "off");
        //COM - JS - 02
        Xrm.Page.getAttribute("postalcode").addOnChange(XrmConciergerie.Scripts.FormCustomerAddress.SetCity);
    },


    //RG124
    //CCR - 31/10/2014 : Afficher le champ Ville ou Ville étrangère en fonction du pays
    //Parametre : rien
    //Retour : rien
    SetCitiesVisibilityText: function (isOnChange) {

        var pays = JSIHelper.GetAttributeValue("country");

        if (pays != null && pays.toLowerCase() == DEFAULT_COUNTRYNAME.toLowerCase()) {
            JSIHelper.GetControl("city").setVisible(true);
            JSIHelper.SetAttributeValue("new_city", null);
            JSIHelper.GetControl("new_city").setVisible(false);
            Xrm.Page.getAttribute("postalcode").setRequiredLevel("required");
            Xrm.Page.getAttribute("city").setRequiredLevel("required");
            Xrm.Page.getAttribute("new_city").setRequiredLevel("none");
        }
        else {
            JSIHelper.SetAttributeValue("city", null);
            JSIHelper.GetControl("city").setVisible(false);
            JSIHelper.GetControl("new_city").setVisible(true);
            Xrm.Page.getAttribute("postalcode").setRequiredLevel("none");
            Xrm.Page.getAttribute("city").setRequiredLevel("none");
            Xrm.Page.getAttribute("new_city").setRequiredLevel("required");
        }
        if (isOnChange)
            JSIHelper.SetAttributeValue("postalcode", null);

    },

    /*
    http://jqueryui.com/autocomplete/
    //COM - JS - 01
    SuggestData
    //retrieve entity
        //if data are found...
        //build list...
        //get DOM field using jQuery...
            //set suggestions
            //define what happens when selecting an item in the list, i.e. set CRM field
    //attention mettre dans fields en premiere position le champ sur lequel le filtre est applique
    */
    SuggestData: function (autoCompleteTextInputHTMLid, crmFieldName, nameOfEntity, fields) {
        var startsWith = $("#" + autoCompleteTextInputHTMLid).val();
        var zip = "";
        if (JSIHelper.GetAttributeValue("postalcode") != null)
            zip = " and new_zip eq '" + JSIHelper.GetAttributeValue("postalcode") + "'";

        //retrieve pays
        SDK.REST.retrieveMultipleRecords(
			nameOfEntity,
			//String.format2("$select=" + fields.join(",") + "&$top=20&$orderby=" + fields[0] + "&$filter=startswith(" + fields[0] + ",'{0}')", startsWith),
            String.format2("$select=" + fields.join(",") + "&$top=20&$orderby=" + fields[0] + "&$filter=startswith(" + fields[0] + ",'{0}')" + zip, startsWith),
			function (results) {
			    //if countries are found...
			    if (results && results.length > 0) {
			        var suggestions = [];
			        //build list...
			        for (var i = 0; i < results.length; i++) {
			            var name = "";
			            for (var j = 0; j < fields.length; j++) {
			                if (j > 0)
			                    name += " ";
			                name += results[i][fields[j]];
			            }
			            suggestions.push(name);
			        }
			        //get DOM field using jQuery...
			        $("#" + autoCompleteTextInputHTMLid).autocomplete({
			            //set suggestions
			            source: suggestions,
			            //define what happens when selecting an item in the list, i.e. set CRM field
			            select: function (event, ui) {
			                if (ui != null && ui.item != null) {
			                    var value = "";
			                    if (fields.length > 1)
			                        value = ui.item.value.substring(0, ui.item.value.lastIndexOf(" "));
			                    else
			                        value = ui.item.value;
			                    this.value = value;
			                    //this.val(value);
			                    Xrm.Page.getAttribute(crmFieldName).setValue(value);
			                    Xrm.Page.getAttribute(crmFieldName).fireOnChange();

			                    if (crmFieldName == "city")
			                        Xrm.Page.getAttribute("postalcode").setValue(ui.item.value.substring(ui.item.value.lastIndexOf(" ")));

			                    //CLEAR NOTIFICATIONS ONCE CORRECT SELECTION IS MADE
			                    Xrm.Page.ui.clearFormNotification("formlevelnotification");
			                    Xrm.Page.getControl(crmFieldName).clearNotification();
			                }
			                return false;
			            },
			        });
			    } else {
			        var suggestions = [];
			        $("#" + autoCompleteTextInputHTMLid).autocomplete({
			            //set suggestions
			            source: suggestions
			        });
			        console.warn(String.format2(XrmConciergerie.Scripts.FormCustomerAddress.NoStartingWithLog, startsWith));

			        //SET ERROR NOTIFICATIONS AND PREVENT SAVE WITH FIELD NOTIFICATIONS
			        Xrm.Page.getControl(crmFieldName).setNotification(XrmConciergerie.Scripts.FormCustomerAddress.NoStartingWith);
			        Xrm.Page.ui.setFormNotification(String.format2(XrmConciergerie.Scripts.FormCustomerAddress.NoStartingWithLog, startsWith), "WARNING", "formlevelnotification");
			    }
			},
			function (error) {
			    console.error(String.format2(XrmConciergerie.Scripts.FormCustomerAddress.RetrieveErrorLog, error.message));
			},
			function () {
			    //OnComplete handler
			}
		);
    },

    OnTypeCountry: function () {
        //COM - JS - 01
        XrmConciergerie.Scripts.FormCustomerAddress.SuggestData("country", "country", "new_country", ["new_countryname"]);
    },

    OnChangeCountry: function () {
        //COM - JS - 01
        if (Xrm.Page.getAttribute("country").getValue())
            XrmConciergerie.Scripts.FormCustomerAddress.CheckData(Xrm.Page.getAttribute("country").getValue(), XrmConciergerie.Scripts.FormCustomerAddress.CheckDataCallback, "new_country", "new_countryname");
        else {
            //country1 ok, clear all notifications
            Xrm.Page.ui.clearFormNotification("formlevelnotification");
            Xrm.Page.getControl("country").clearNotification();
        }
    },

    OnTypeCity: function () {
        //COM - JS - 01
        XrmConciergerie.Scripts.FormCustomerAddress.SuggestData("city", "city", "new_city", ["new_cityname", "new_zip"]);
    },

    SetCity: function () {

        var zip = JSIHelper.GetAttributeValue("postalcode");

        if (zip != null) {
            SDK.REST.retrieveMultipleRecords(
                "new_city",
                "$select=new_cityname,new_cityId&"
                + "$filter=new_zip eq '" + zip + "'",
            function (results) {
                if (results && results.length == 1) {
                    var city = results[0];
                    if (JSIHelper.GetAttributeValue("city") == null)
                        Xrm.Page.getAttribute("city").setValue(city.new_cityname);
                }
                else {
                    Xrm.Page.getAttribute("city").setValue(null);
                }
            },
            function (error) {
                Xrm.Page.ui.setFormNotification(error, "ERROR", "ERROR_ODATA_CITY");
            },
            function () {
            }

            );
        }
    },

    _namespace: true,
}
