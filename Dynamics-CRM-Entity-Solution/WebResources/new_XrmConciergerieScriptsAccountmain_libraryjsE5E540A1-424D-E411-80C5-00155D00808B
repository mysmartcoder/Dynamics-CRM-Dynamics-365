//Créateur : Zagdoun David
//Date : 01/10/2014
//Fichier JS contenant les fonctionnalités permettant de gérer les comptes

//On référence la bibliotheque Generics
/// <reference path="../Generics/global_functions.js" />
/// <reference path="../Generics/SDK.REST.js" />
/// <reference path="../Generics/global_variables.js" />
/// <reference path="../Generics/JSIHelper.js" />

//On utilisera les namespaces pour avoir plus d'organisation dans le code
if (typeof (XrmConciergerie) == "undefined")
{ XrmConciergerie = { __namespace: true }; }
if (typeof (XrmConciergerie.Scripts) == "undefined")
{ XrmConciergerie.Scripts = { __namespace: true }; }

//On crée le namespace du fichier
//Pour le fichier Geneic le namespace sera XrmConciergerie.Scripts.Generics
XrmConciergerie.Scripts.FormAccount = {

    Form_OnLoad: function () {
        
        //Ajout de méthode sur l'évènement OnLoad

        //Le champ "Type de compte" passera en lecture seule après l’enregistrement de la fiche
        XrmConciergerie.Scripts.FormAccount.ReadOnlyAccountType();

        //RG014
        if (Xrm.Page.ui.getFormType() == FORM_TYPE_CREATE) 
            //A la création Pays par défaut "France"
            XrmConciergerie.Scripts.Generics.SetDefaultCountry();                       

        //RGXXX
        Xrm.Page.getAttribute("new_accounttype").addOnChange(XrmConciergerie.Scripts.FormAccount.DefaultValueTypeClient);

        //RG006
        XrmConciergerie.Scripts.Generics.SetCitiesVisibility("new_countryid", "new_cityid", "new_othercity", "address1_postalcode", false);
        Xrm.Page.getAttribute("new_countryid").addOnChange(function () { XrmConciergerie.Scripts.Generics.SetCitiesVisibility("new_countryid", "new_cityid", "new_othercity", "address1_postalcode", true); });

        //RG070
        XrmConciergerie.Scripts.FormAccount.SetMandatoryPostalCode();
        Xrm.Page.getAttribute("new_countryid").addOnChange(XrmConciergerie.Scripts.FormAccount.SetMandatoryPostalCode);

        //role de securite
        XrmConciergerie.Scripts.FormAccount.CheckRole();

        //----------------------
        //Visibilité des onglets
        //RG169
        XrmConciergerie.Scripts.FormAccount.SetTabVisibilityIdentite();
        JSIHelper.GetAttribute("new_accounttype").addOnChange(XrmConciergerie.Scripts.FormAccount.SetTabVisibilityIdentite);

        //RG170
        XrmConciergerie.Scripts.FormAccount.SetTabVisibilityInformations();
        JSIHelper.GetAttribute("new_accounttype").addOnChange(XrmConciergerie.Scripts.FormAccount.SetTabVisibilityInformations);

        //RG171
        XrmConciergerie.Scripts.FormAccount.SetSectionVisibilityCoordonnees();
        JSIHelper.GetAttribute("new_accounttype").addOnChange(XrmConciergerie.Scripts.FormAccount.SetSectionVisibilityCoordonnees);

        //RG172
        XrmConciergerie.Scripts.FormAccount.SetTabVisibilityServicesPrestataire();
        JSIHelper.GetAttribute("new_accounttype").addOnChange(XrmConciergerie.Scripts.FormAccount.SetTabVisibilityServicesPrestataire);

        //RG173
        XrmConciergerie.Scripts.FormAccount.SetTabVisibilityAdministration();
        JSIHelper.GetAttribute("new_accounttype").addOnChange(XrmConciergerie.Scripts.FormAccount.SetTabVisibilityAdministration);

        //RG174
        XrmConciergerie.Scripts.FormAccount.SetTabVisibilityConges();
        JSIHelper.GetAttribute("new_accounttype").addOnChange(XrmConciergerie.Scripts.FormAccount.SetTabVisibilityConges);

        //RG175
        XrmConciergerie.Scripts.FormAccount.SetTabVisibilitySuiviDesVisites();
        JSIHelper.GetAttribute("new_accounttype").addOnChange(XrmConciergerie.Scripts.FormAccount.SetTabVisibilitySuiviDesVisites);

        //RG176
        XrmConciergerie.Scripts.FormAccount.SetTabVisibilityEvaluation();
        JSIHelper.GetAttribute("new_accounttype").addOnChange(XrmConciergerie.Scripts.FormAccount.SetTabVisibilityEvaluation);

        //RG177
        XrmConciergerie.Scripts.FormAccount.SetTabVisibilitySatisfactionClient();
        JSIHelper.GetAttribute("new_accounttype").addOnChange(XrmConciergerie.Scripts.FormAccount.SetTabVisibilitySatisfactionClient);

        //RGXXX
        XrmConciergerie.Scripts.FormAccount.SetTabVisibilityComptesAssocies();
        JSIHelper.GetAttribute("new_accounttype").addOnChange(XrmConciergerie.Scripts.FormAccount.SetTabVisibilityComptesAssocies);

        //RG116
        XrmConciergerie.Scripts.FormAccount.SetTabVisibilityPrestatairesImposes();
        JSIHelper.GetAttribute("new_accounttype").addOnChange(XrmConciergerie.Scripts.FormAccount.SetTabVisibilityPrestatairesImposes);

        //RG143
        XrmConciergerie.Scripts.FormAccount.SetTabVisibilityContratsAssocies();
        JSIHelper.GetAttribute("new_accounttype").addOnChange(XrmConciergerie.Scripts.FormAccount.SetTabVisibilityContratsAssocies);

        //RG008
        //Xrm.Page.getAttribute("new_companycontactemail2").addOnChange(function () { XrmConciergerie.Scripts.Generics.MailValidation("new_companycontactemail2"); });
        //Xrm.Page.getAttribute("emailaddress1").addOnChange(function () { XrmConciergerie.Scripts.Generics.MailValidation("emailaddress1"); });
        //Xrm.Page.getAttribute("emailaddress2").addOnChange(function () { XrmConciergerie.Scripts.Generics.MailValidation("emailaddress2"); });
        //Xrm.Page.getAttribute("emailaddress3").addOnChange(function () { XrmConciergerie.Scripts.Generics.MailValidation("emailaddress3"); });

        //Fin Visibilité des onglets
        //----------------------------


        //RG026
        JSIHelper.GetAttribute("new_cityid").addOnChange(XrmConciergerie.Scripts.Generics.SetZipCode);


        //RG013
        JSIHelper.GetAttribute("address1_postalcode").addOnChange(XrmConciergerie.Scripts.Generics.SetCity);

        Xrm.Page.getAttribute("new_cityid").addOnChange(XrmConciergerie.Scripts.FormAccount.SetZip);
        JSIHelper.HackPhones();

        // A la sauvegarde, on copie le nom de la ville fr/étrangère dans le champ ville natif
        Xrm.Page.data.entity.addOnSave(XrmConciergerie.Scripts.FormAccount.Form_OnSave);

        // filtre les villes en fonction du code postal
        XrmConciergerie.Scripts.Generics.preFilterLookupCity("new_cityid", "address1_postalcode");

        // RG?: En fonction du type de client, on affiche/cache certains champs du header
        XrmConciergerie.Scripts.FormAccount.CleanHeader();
    },

    // Form save
    Form_OnSave: function() {
        var pays = (Xrm.Page.getAttribute("new_countryid").getValue() == null) ? null : Xrm.Page.getAttribute("new_countryid").getValue()[0].name;
        var ville = null;
        //Si le pays est égal a France alors code postale obligatoire
        if ((pays != null) && (pays.toLowerCase() == DEFAULT_COUNTRYNAME.toLowerCase()))
            ville = (Xrm.Page.getAttribute("new_cityid").getValue() == null) ? null : Xrm.Page.getAttribute("new_cityid").getValue()[0].name;
        else
            ville = Xrm.Page.getAttribute("new_othercity").getValue();
        

        JSIHelper.SetAttributeValue("address1_country", pays);
        Xrm.Page.getAttribute("address1_country").setSubmitMode("always");
        JSIHelper.SetAttributeValue("address1_city", ville);
        Xrm.Page.getAttribute("address1_city").setSubmitMode("always");
    },

    //RG113
    //Paramètre : rien
    //Retour : rien
    ReadOnlyAccountType: function () {
        if (Xrm.Page.ui.getFormType() != FORM_TYPE_CREATE) {
            Xrm.Page.getControl("new_accounttype").setDisabled(true);
        }
    },

    //Si on séléctionne CDO ou Distributeur la valeur par défaut sera Entreprise sinon null
    //Paramètre : rien
    //Retour : rien
    DefaultValueTypeClient: function () {

        var accountType = Xrm.Page.getAttribute("new_accounttype").getValue();

        if (accountType != null) {
            //si Type de compte CDO ou Distributeur
            if (accountType == 100000001 || accountType == 100000002) {
                Xrm.Page.getAttribute("new_customertype").setValue(100000000);
            }
            else {
                Xrm.Page.getAttribute("new_customertype").setValue(null);
            }
        }
    },


    //RG070
    //Paramètre : rien
    //Retour : rien
    SetMandatoryPostalCode: function(){
    
        var pays = (Xrm.Page.getAttribute("new_countryid").getValue() == null) ? null : Xrm.Page.getAttribute("new_countryid").getValue()[0].name;
        //Si le pays est égal a France alors code postale obligatoire
        if (pays != null && pays.toLowerCase() == DEFAULT_COUNTRYNAME.toLowerCase())
        {

            Xrm.Page.getAttribute("address1_postalcode").setRequiredLevel("required");
            Xrm.Page.getAttribute("new_cityid").setRequiredLevel("required");
            Xrm.Page.getAttribute("new_othercity").setRequiredLevel("none");
        }
        else {
            Xrm.Page.getAttribute("address1_postalcode").setRequiredLevel("none");
            Xrm.Page.getAttribute("new_cityid").setRequiredLevel("none");
            Xrm.Page.getAttribute("new_othercity").setRequiredLevel("required");
        }

    },


    //----------------------------------------------------------
    //Visibilités des onglets
    //RG169
    //Afficher l'onglet Identité si compte Prestataire
    //Paramètre : rien
    //Retour : rien
    SetTabVisibilityIdentite: function () {
        JSIHelper.SetTabVisibility("SUMMARY_TAB", "new_accounttype", "==", ACCOUNT_TYPEOFACCOUNT_PRESTATAIRE);
    },


    //RG170
    //Afficher l'onglet Informations si compte CDO/D/I
    //Paramètre : rien
    //Retour : rien
    SetTabVisibilityInformations: function () {
        if (JSIHelper.GetAttributeValue("new_accounttype") == ACCOUNT_TYPEOFACCOUNT_CDO ||
            JSIHelper.GetAttributeValue("new_accounttype") == ACCOUNT_TYPEOFACCOUNT_DISTRIBUTEUR ||
            JSIHelper.GetAttributeValue("new_accounttype") == ACCOUNT_TYPEOFACCOUNT_INTERMEDIAIRE) {
            JSIHelper.SetTabVisibility("tab_15", "new_accounttype", "!=", 0);
        }
        else {
            JSIHelper.SetTabVisibility("tab_15", "new_accounttype", "==", 0);
        }

    },


    //RG171
    //Afficher la section Coordonnees si compte CDO/D/I
    //Paramètre : rien
    //Retour : rien
    SetSectionVisibilityCoordonnees: function () {
        if (JSIHelper.GetAttributeValue("new_accounttype") == ACCOUNT_TYPEOFACCOUNT_CDO ||
            JSIHelper.GetAttributeValue("new_accounttype") == ACCOUNT_TYPEOFACCOUNT_DISTRIBUTEUR ||
            JSIHelper.GetAttributeValue("new_accounttype") == ACCOUNT_TYPEOFACCOUNT_INTERMEDIAIRE) {
            JSIHelper.SetSectionVisibility("SUMMARY_TAB_section_3", "new_accounttype", "!=", 0);
            XrmConciergerie.Scripts.FormAccount.SetMandatoryPostalCode();
        }
        else {
            JSIHelper.SetSectionVisibility("SUMMARY_TAB_section_3", "new_accounttype", "==", 0);
            Xrm.Page.getAttribute("address1_postalcode").setRequiredLevel("none");
            Xrm.Page.getAttribute("new_cityid").setRequiredLevel("none");
            Xrm.Page.getAttribute("new_othercity").setRequiredLevel("none");
        }

    },


    //RG172
    //Afficher l'onglet ServicesPrestataire si compte Prestataire
    //Paramètre : rien
    //Retour : rien
    SetTabVisibilityServicesPrestataire: function () {
        JSIHelper.SetTabVisibility("tab_4", "new_accounttype", "==", ACCOUNT_TYPEOFACCOUNT_PRESTATAIRE);
    },


    //RG173
    //Afficher l'onglet Administration si compte Prestataire
    //Paramètre : rien
    //Retour : rien
    SetTabVisibilityAdministration: function () {
        JSIHelper.SetTabVisibility("tab_5", "new_accounttype", "==", ACCOUNT_TYPEOFACCOUNT_PRESTATAIRE);
    },


    //RG174
    //Afficher l'onglet Conges si compte Prestataire
    //Paramètre : rien
    //Retour : rien
    SetTabVisibilityConges: function () {
        JSIHelper.SetTabVisibility("tab_7", "new_accounttype", "==", ACCOUNT_TYPEOFACCOUNT_PRESTATAIRE);
    },


    //RG175
    //Afficher l'onglet SuiviDesVisites si compte Prestataire
    //Paramètre : rien
    //Retour : rien
    SetTabVisibilitySuiviDesVisites: function () {
        JSIHelper.SetTabVisibility("tab_8", "new_accounttype", "==", ACCOUNT_TYPEOFACCOUNT_PRESTATAIRE);
    },


    //RG176
    //Afficher l'onglet Evaluation si compte Prestataire
    //Paramètre : rien
    //Retour : rien
    SetTabVisibilityEvaluation: function () {
        JSIHelper.SetTabVisibility("tab_9", "new_accounttype", "==", ACCOUNT_TYPEOFACCOUNT_PRESTATAIRE);
    },


    //RG177
    //Afficher l'onglet SatisfactionClient si compte Prestataire
    //Paramètre : rien
    //Retour : rien
    SetTabVisibilitySatisfactionClient: function () {
        JSIHelper.SetTabVisibility("tab_10", "new_accounttype", "==", ACCOUNT_TYPEOFACCOUNT_PRESTATAIRE);
    },


    //XXX
    //Afficher l'onglet ComptesAssocies si compte CDO/D/I
    //Paramètre : rien
    //Retour : rien
    SetTabVisibilityComptesAssocies: function () {
        if (JSIHelper.GetAttributeValue("new_accounttype") == ACCOUNT_TYPEOFACCOUNT_CDO ||
            JSIHelper.GetAttributeValue("new_accounttype") == ACCOUNT_TYPEOFACCOUNT_DISTRIBUTEUR ||
            JSIHelper.GetAttributeValue("new_accounttype") == ACCOUNT_TYPEOFACCOUNT_INTERMEDIAIRE) {
            JSIHelper.SetTabVisibility("tab_13", "new_accounttype", "!=", 0);
        }
        else {
            JSIHelper.SetTabVisibility("tab_13", "new_accounttype", "==", 0);
        }
    },


    //RG116
    //Afficher l'onglet PrestatairesImposes si compte Distributeur
    //Paramètre : rien
    //Retour : rien
    SetTabVisibilityPrestatairesImposes: function () {
        JSIHelper.SetTabVisibility("tab_14", "new_accounttype", "==", ACCOUNT_TYPEOFACCOUNT_DISTRIBUTEUR);
    },


    //RG143
    //Afficher l'onglet ContratsAssocies si compte Distributeur
    //Paramètre : rien
    //Retour : rien
    SetTabVisibilityContratsAssocies: function () {
        JSIHelper.SetTabVisibility("tab_16", "new_accounttype", "==", ACCOUNT_TYPEOFACCOUNT_DISTRIBUTEUR);
    },

    //Fin visibilité des onglets
    //----------------------------------------------------------

    // RG026: Set le code postal en fonction de la ville
    SetZip: function () {
        JSIHelper.GetParentAttribute("new_cityid", "new_zip", "address1_postalcode");
    },

    CheckRole:function(){
        if (XrmConciergerie.Scripts.Generics.UserHasRole("Concierge") || XrmConciergerie.Scripts.Generics.UserHasRole("Expert concierge") || XrmConciergerie.Scripts.Generics.UserHasRole("Superviseur"))
        {
            if (Xrm.Page.ui.getFormType() == FORM_TYPE_UPDATE) {
                if (Xrm.Page.getAttribute("new_accounttype").getValue() == ACCOUNT_TYPEOFACCOUNT_CDO || Xrm.Page.getAttribute("new_accounttype").getValue() == ACCOUNT_TYPEOFACCOUNT_INTERMEDIAIRE || Xrm.Page.getAttribute("new_accounttype").getValue() == ACCOUNT_TYPEOFACCOUNT_DISTRIBUTEUR || (Xrm.Page.getAttribute("new_accounttype").getValue() == ACCOUNT_TYPEOFACCOUNT_PRESTATAIRE && Xrm.Page.getAttribute("new_typology").getValue() != ACCOUNT_TYPOLOGIE_PONCTUEL)) {
                    XrmConciergerie.Scripts.Generics.disableFormFields(true);
                    XrmConciergerie.Scripts.FormAccount.DisableNav();
                    XrmConciergerie.Scripts.FormAccount.HideAllSubgrid();
                }
            }
            else if (Xrm.Page.ui.getFormType() == FORM_TYPE_CREATE) {
                Xrm.Page.getControl("new_accounttype").setDisabled(true);
                Xrm.Page.getAttribute("new_typology").setValue(ACCOUNT_TYPOLOGIE_PONCTUEL);
                Xrm.Page.getControl("new_typology").setDisabled(true);
            }
        }
        else if (XrmConciergerie.Scripts.Generics.UserHasRole("Direction conciergerie") || XrmConciergerie.Scripts.Generics.UserHasRole("Gestionnaire du reseau")) {
            if (Xrm.Page.ui.getFormType() == FORM_TYPE_UPDATE) {
                if (Xrm.Page.getAttribute("new_accounttype").getValue() != ACCOUNT_TYPEOFACCOUNT_PRESTATAIRE) {
                    XrmConciergerie.Scripts.Generics.disableFormFields(true);
                    XrmConciergerie.Scripts.FormAccount.DisableNav();
                    XrmConciergerie.Scripts.FormAccount.HideAllSubgrid();
                }
            }
            else if (Xrm.Page.ui.getFormType() == FORM_TYPE_CREATE) {
                Xrm.Page.getControl("new_accounttype").setDisabled(true);
            }

            // Cache l'ajout des notes+activités
            $("#notescontrolactivityContainer_notescontrol div:first").hide();
        }
        /*
        MK: mantis 1335
        else if (XrmConciergerie.Scripts.Generics.UserHasRole("Developpement")) {
            if (Xrm.Page.ui.getFormType() == FORM_TYPE_UPDATE) {
                if (Xrm.Page.getAttribute("new_accounttype").getValue() == ACCOUNT_TYPEOFACCOUNT_PRESTATAIRE) {
                    XrmConciergerie.Scripts.Generics.disableFormFields(true);
                    XrmConciergerie.Scripts.FormAccount.DisableNav();
                    XrmConciergerie.Scripts.FormAccount.HideAllSubgrid();
                }
            }
            else if (Xrm.Page.ui.getFormType() == FORM_TYPE_CREATE) {
                Xrm.Page.getControl("new_accounttype").removeOption(ACCOUNT_TYPEOFACCOUNT_PRESTATAIRE);
            }
        }*/
    },

    HideAllSubgrid: function ()
    {
        XrmConciergerie.Scripts.FormAccount.SubgridHideButtonAdd("associatedcontacts");
        XrmConciergerie.Scripts.FormAccount.SubgridHideButtonAdd("accountintermediaire");
        XrmConciergerie.Scripts.FormAccount.SubgridHideButtonAdd("associatedservices");
        XrmConciergerie.Scripts.FormAccount.SubgridHideButtonAdd("associatedmeetings");
        XrmConciergerie.Scripts.FormAccount.SubgridHideButtonAdd("associatedsatisfactions");
        XrmConciergerie.Scripts.FormAccount.SubgridHideButtonAdd("associatedsuppliers");
        XrmConciergerie.Scripts.FormAccount.SubgridHideButtonAdd("gridcontratsassocies");                                              
    },

    DisableNav:function()
    {        
        Xrm.Page.ui.navigation.items.forEach(function (item, index) {
            var itemLabel = item.getId();
            if (itemLabel.toLowerCase() == "navactivities" || itemLabel.toLowerCase() == "navconnections" || itemLabel.toLowerCase() == "nav_new_account_campaign") {
                item.setVisible(false);
            }
        });
    },

    // Cache le bouton "+" d'une sous-grille
    SubgridHideButtonAdd: function (gridname_)
    {
        if ($("#" + gridname_).length == 0)
        {
            setTimeout("XrmConciergerie.Scripts.FormAccount.SubgridHideButtonAdd('" + gridname_ + "')", 1000);
            return;
        }
        $("#" + gridname_ + "_addImageButton").hide();
    },

    // Affiche/Cache les champs du header en fonction du type de client
    CleanHeader: function ()
    {
        // Réajuste la taille du div parent
        $(".ms-crm-HeaderTileElement ").css("width", "180px");

        $(".ms-crm-HeaderTilesWrapperElement").css("min-width", "");
    },

    _namespace: true
}
